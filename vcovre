#lang racket

(define (comprimento l)
  (if (null? l)
      0
      (add1 (comprimento (cdr l )))))

(define (twice l)
  (if (null? l)
      '()
      (cons (* 2 (car l)) (twice (cdr l)))))

(define (pertence? x l)
  (if (null? l)
      #f
      (if (equal? x (car l))
          #t
          (pertence? x (cdr l)))))

(define (prod-escalar l1 l2)
  (if (or (null? l1) (null? l2))
      0
      (+ (* (car l1) (car l2)) (prod-escalar (cdr l1) (cdr l2)))))